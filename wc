"Upgrading Recipes\n``upgrade-helper/upgrade-helper.conf`` configuration file in your\n:term:`Build Directory`. You can find a sample configuration file in the\n:yocto_git:`AUH source repository </auto-upgrade-helper/tree/>`.\nRead through the sample file and make configurations as needed. For\nexample, if you enabled build history in your ``local.conf`` as\ndescribed earlier, you must enable it in ``upgrade-helper.conf``.\nAlso, if you are using the default ``maintainers.inc`` file supplied\nwith Poky and located in ``meta-yocto`` and you do not set a\n\"maintainers_whitelist\" or \"global_maintainer_override\" in the\n``upgrade-helper.conf`` configuration, and you specify \"-e all\" on\nthe AUH command-line, the utility automatically sends out emails to\nall the default maintainers. Please avoid this.\nThis next set of examples describes how to use the AUH:\n-  *Upgrading a Specific Recipe:* To upgrade a specific recipe, use the\nfollowing form::\n$ upgrade-helper.py recipe_name\nFor example, this command upgrades the ``xmodmap`` recipe::\n$ upgrade-helper.py xmodmap\n-  *Upgrading a Specific Recipe to a Particular Version:* To upgrade a\nspecific recipe to a particular version, use the following form::\n$ upgrade-helper.py recipe_name -t version\nFor example, this command upgrades the ``xmodmap`` recipe to version 1.2.3::\n$ upgrade-helper.py xmodmap -t 1.2.3\n-  *Upgrading all Recipes to the Latest Versions and Suppressing Email\nNotifications:* To upgrade all recipes to their most recent versions\nand suppress the email notifications, use the following command::\n$ upgrade-helper.py all\n-  *Upgrading all Recipes to the Latest Versions and Send Email\nNotifications:* To upgrade all recipes to their most recent versions\nand send email messages to maintainers for each attempted recipe as\nwell as a status email, use the following command::\n$ upgrade-helper.py -e all\nOnce you have run the AUH utility, you can find the results in the AUH\n:term:`Build Directory`::\n${BUILDDIR}/upgrade-helper/timestamp\nThe AUH utility\nalso creates recipe update commits from successful upgrade attempts in\nthe layer tree.\nYou can easily set up to run the AUH utility on a regular basis by using\na cron job. See the\n:yocto_git:`weeklyjob.sh </auto-upgrade-helper/tree/weeklyjob.sh>`\nfile distributed with the utility for an example.\nUsing ``devtool upgrade``\n=========================\nAs mentioned earlier, an alternative method for upgrading recipes to\nnewer versions is to use\n:doc:`devtool upgrade </ref-manual/devtool-reference>`.\nYou can read about ``devtool upgrade`` in general in the\n\":ref:`sdk-manual/extensible:use \\`\\`devtool upgrade\\`\\` to create a version of the recipe that supports a newer version of the software`\"\nsection in the Yocto Project Application Development and the Extensible\nSoftware Development Kit (eSDK) Manual.\nTo see all the command-line options available with ``devtool upgrade``,\nuse the following help command::\n$ devtool upgrade -h\nIf you want to find out what version a recipe is currently at upstream\nwithout any attempt to upgrade your local version of the recipe, you can\nuse the following command::\n$ devtool latest-version recipe_name\nAs mentioned in the previous section describing AUH, ``devtool upgrade``\nworks in a less-automated manner than AUH. Specifically,\n``devtool upgrade`` only works on a single recipe that you name on the\ncommand line, cannot perform build and integration testing using images,\nand does not automatically generate commits for changes in the source\ntree. Despite all these \"limitations\", ``devtool upgrade`` updates the\nrecipe file to the new upstream version and attempts to rebase custom\npatches contained by the recipe as needed.\n.. note::\nAUH uses much of ``devtool upgrade`` behind the scenes making AUH somewhat\nof a \"wrapper\" application for ``devtool upgrade``.\nA typical scenario involves having used Git to clone an upstream\nrepository that you use during build operations. Because you have built the\nrecipe in the past, the layer is likely added to your\nconfiguration already. If for some reason, the layer is not added, you\ncould add it easily using the\n\":ref:`bitbake-layers <bsp-guide/bsp:creating a new bsp layer using the \\`\\`bitbake-layers\\`\\` script>`\"\nscript. For example, suppose you use the ``nano.bb`` recipe from the\n``meta-oe`` layer in the ``meta-openembedded`` repository. For this\nexample, assume that the layer has been cloned into following area::\n/home/scottrif/meta-openembedded\nThe following command from your :term:`Build Directory` adds the layer to\nyour build configuration (i.e. ``${BUILDDIR}/conf/bblayers.conf``)::\n$ bitbake-layers add-layer /home/scottrif/meta-openembedded/meta-oe\nNOTE: Starting bitbake server...\nParsing recipes: 100% |##########################################| Time: 0:00:55\nParsing of 1431 .bb files complete (0 cached, 1431 parsed). 2040 targets, 56 skipped, 0 masked, 0 errors.\nRemoving 12 recipes from the x86_64 sysroot: 100% |##############| Time: 0:00:00\nRemoving 1 recipes from the x86_64_i586 sysroot: 100% |##########| Time: 0:00:00\nRemoving 5 recipes from the i586 sysroot: 100% |#################| Time: 0:00:00\nRemoving 5 recipes from the qemux86 sysroot: 100% |##############| Time: 0:00:00\nFor this example, assume that the ``nano.bb`` recipe that\nis upstream has a 2.9.3 version number. However, the version in the\nlocal repository is 2.7.4. The following command from your build\ndirectory automatically upgrades the recipe for you::\n$ devtool upgrade nano -V 2.9.3\nNOTE: Starting bitbake server...\nNOTE: Creating workspace layer in /home/scottrif/poky/build/workspace\nParsing recipes: 100% |##########################################| Time: 0:00:46\nParsing of 1431 .bb files complete (0 cached, 1431 parsed). 2040 targets, 56 skipped, 0 masked, 0 errors.\nNOTE: Extracting current version source...\nNOTE: Resolving any missing task queue dependencies